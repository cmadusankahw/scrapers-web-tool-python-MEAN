Ratings & Reviews:
they are included in product and service schemas
current rating    no_of_reatings    reviews: array

once the booking -> approved || order -> delivered
then, user is recieving a notification ->
then, a popup/modal to rate/review relavant order/booking within that notification

Product/ Service ratings -> total of order ratings/ booking ratings

Business performance rate -> (total of product ratings/service ratings) + (no of sales/booking) / 100%




Product & Service Search Filters:
name  type  qty_available(product only)   date_availabble/ duration_available (service only)
ratings/popularity  price   location

Each search result (product or service card) -> no_of_orders/ bookings   ratings  view_reviews(button)




Delivery Services:
Can be maintained under Inventory Page
Attr: Delivery_id   name  address   hotline   max_delivery_time   min_delivery_time (delivery time in Days only)  delivery_rate  delivey_rate_type

Each product -> has a assigend Delivery_service
  -> will be shown in product_details
  -> will be shown in orders (sp dash/ eventplanner dash)
  -> delivery service details will be provided in order_recipt sent by email



Documents generated:
    Booking Reciept
    Appointment note
    Order Reciept

    Order Cancel note
    Booking cancl note
    appointment cancel note

    event plan(agenda)
    invitation email for closed type event participants
    registration form for open type participants




Search Services & Products:
category var should be passed to product/service-card comp. categories shold be checked with the
relavant product service categories at the other end.






**Development Stages:

1) Frontend - auth/home/seller/service provider/service/product
2) Modedling, Form validation & Error handeling
3) Basic Backnend connect  - product/ product card
                            service/ service card
                            servic/product search
                            update bprofile
                            update user profile
4) Authentication - user acc/ login /signup/ session mgmt
5) Database design and connect
6) Frontend Event planner/ event
7) Pararally advanced backend of product/service provider/service/seller
8) Basic backend on event planner/event
9) Advanced backend on event planner/event
10) Database modifications and optimization (transaction/migrations)
11) Email forwarding, google maps advanced connect, google forms connect and other 3rd party dev
12) Report generation analytics (chart js jspdf & oher tools)
13) Recommandation & analytics with Tensorflow and other ML tools
14) Testing & Deployment
15) Concurrent access optimization


** Design Patterns
------------------

1. Singlethon Patterns
    When using servics as AsObservable
      - Using Observables is allowing only one instaance to be intiated in the relavant service class
      - so in that case we use singlethon design pattern here
    We use only once database connection object
      - we use app.js as a single instance and use factory pattern to inherit others (so here also) we use singlethon
        design pattern for the database connector object

2. Adapter Design Patterns
    using middleware
      - multer to transorm image files to form data and upload to server
      - json web token to encrypt decrypt login details
      - body-parser to parse JSON data to transform from the requests
      - password encryption

3. Factory Design pattern
  Inhertance
  Implementation and polymorphism




Protecting Wrappers and middleware
----------------------------------
  - router protecting with auth.guard class
  - request wrapping from frontend with auth-interceptor class
  - backend protection middleware auth-check.js to validate tokens


Development Notes
-----------------

** business profile details should be included in th merchant schema
    - auth module MEerchant does not have all these dtails of usiness profile.
    - using monogDB noSQL feature we only add those info to Merchant once we create a business profile

** Product/service is created --> include user_id with it as ref (reference) to the merchant schema

** Order/ appointment/booking is created --> user-id as reference to the created user and the service/product id

** service/product id naming convention -> business_id _ service/product id  ex:- B1_S1 , B2_P1


Modifications:
update product/service api
remove signup user id generation/ hasdata in frontend
make appointment --> service view comp
book now
make appointment
order now
make payment (linking card details comp)
home page modifications (download mobile app and other data)
booking note
appointment note
order reciept
(printing with jspdf maiing with node mailer)
service search on location basis - with google maps

part 2 : event frontend comps

part 3: seller/ service provider backend
    - business profile (id verify / businss verify) - seller/sp
    - dash stat/ graphs/ business stat/ earnings
    - bookings/orders/ appointments/ delivery services - seller/sp/event planner
    - booking calendar mgmt

part 4 - improvements - db transactions/migrations
       - complete event frontend comps
       - event part backend

part 5 - admin comps
       - admin backend
       - payment gateway/ payment management

part 6 - report generation (chart js and other libriaries)

part 7 - advanced error handeling/ enhancements/ validation check / Testing

part 8 - additional features - recommendations/ rating
       - azure cognetive service - chat bot
       - adavanced analytical reports with tensorflow js
       - cloud deplyment azure, evenza.biz domain


**Note:-
Booking is placed when booking, service provider can only complete them

Appointment will not be hecked with bookings (even while having a booking an appointment can be made)

Appointments need to be approved by the service provider


General Routers
---------------

/users/:user_id (Any)

/bprofile/:user_id (Merchant)
